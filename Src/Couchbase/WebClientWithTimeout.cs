using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Web.Script.Serialization;
using System.Threading;
using System.Reflection;

namespace Couchbase
{
    internal class WebClientWithTimeout : WebClient
    {
        private static readonly string ClientUA;
        private static int InstanceCounter = 0;

        static WebClientWithTimeout()
        {
            var a = typeof(WebClientWithTimeout).Assembly;
            var ua = "Couchbase";

            // release builds have AssemblyFileVersion (generated by git decribe)
            var af = Attribute.GetCustomAttribute(a, typeof(AssemblyFileVersionAttribute)) as AssemblyFileVersionAttribute;

            if (af != null)
            {
                ua += "/" + af.Version;
            }
            else
            {
                // fall back to the assembly version
                var av = Attribute.GetCustomAttribute(a, typeof(AssemblyVersionAttribute)) as AssemblyVersionAttribute;
                if (av != null)
                    ua += "/" + av.Version;
            }

            ClientUA = ua;
        }

        public WebClientWithTimeout()
        {
            this.Encoding = Encoding.UTF8;

            this.Headers[HttpRequestHeader.CacheControl] = "no-cache";
            this.Headers[HttpRequestHeader.Accept] = "application/com.Couchbase+json";
            this.Headers[HttpRequestHeader.UserAgent] = ClientUA;
        }

        protected override WebRequest GetWebRequest(Uri address)
        {
            var retval = base.GetWebRequest(address);
            retval.Timeout = this.Timeout;

            var hrw = retval as HttpWebRequest;
            if (hrw != null)
            {
                hrw.ReadWriteTimeout = this.ReadWriteTimeout;
                hrw.KeepAlive = false;

                if (this.PreAuthenticate && this.Credentials != null)
                {
                    var nc = this.Credentials.GetCredential(address, "Basic");
                    if (nc != null)
                    {
                        hrw.Headers["Authorization"] = "Basic " + Convert.ToBase64String(this.Encoding.GetBytes(nc.UserName + ":" + nc.Password));
                    }
                }
            }

            return retval;
        }

        /// <summary>
        /// Returns a <see cref="WebRequest"/> object for the specified resource. The returned instance will have a custom ConnectionGroup to avoid running into connection limits.
        /// </summary>
        /// <param name="address">A <see cref="Uri"/> that identifies the resource to request. </param>
        /// <returns>A new <see cref="WebRequest"/> object for the specified resource. </returns>
        public WebRequest GetWebRequest(Uri address, string connectionGroupName)
        {
            var retval = this.GetWebRequest(address);
            retval.ConnectionGroupName = connectionGroupName + ":" + Interlocked.Increment(ref InstanceCounter);// connectionGroupName;

            return retval;
        }

        public int ReadWriteTimeout { get; set; }

        /// <summary>
        /// Connection timeout in msec.
        /// </summary>
        public int Timeout { get; set; }

        /// <summary>
        /// This will send the credentials (using basic auth) every time without getting a 401 response from the server.
        /// </summary>
        public bool PreAuthenticate { get; set; }
    }
}

#region [ License information          ]

/* ************************************************************
 *
 *    @author Couchbase <info@couchbase.com>
 *    @copyright 2012 Couchbase, Inc.
 *    @copyright 2010 Attila Kiskó, enyim.com
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 * ************************************************************/

#endregion